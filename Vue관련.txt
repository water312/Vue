cd 파일명
npm run serve

Framework란
어플리케이션을 구축 및 배포하는 표준 방법을 제공하며 소프트웨어 응용 프로그램,제품 및 솔루션의 개발을 용이하게
하기 위해 더 큰 소프트웨어 플랫폼의 일부로 특정 기능을 제공하는 보편적이고 재사용 가능한 소프트웨어 환경입니다
그중에서 웹 프레임워크 또는 웹 애플리케이션 프레임워크는 웹 서비스 개발을 위한 프레임워크이다

소프트웨어를 구축할 수 있는 구조입니다 기초 역할을 하므로 처음부터 완전히 시작하지 않습니다
프레임워크는 일반적으로 특정 프로그래밍 언어와 연결되며 다양한 유형의 작업에 적합합니다
생산성 - 시간이 절약되고 오류 위험이 줄어듭니다. 처음부터 모든 것을 작성할 필요가 없으므로 오류가 발생할 가능성이 적습니다
- 더 안전한 코드
- 더 간단한 테스트 및 디버깅
- 중복 코드 방지
- 깨끗하고 쉽게 적용가능한 코드
- 프로젝트에 특정한 코드 작성에 집중
- 확장성

SPA(Sing Page Application)란
SPA는 웹 브라우저가 전체 새 페이지를 로드하는 기본 방법대신 웹 서버의 새 데이터로 현재 웹 페이지를 동적으로
다시 작성하여 사용자와 상호작용하는 웹 응용 프로그램 또는 웹 사이트입니다 목표는 웹사이트를 네이티브 앱처럼
느끼게 하는 더 빠른 전환입니다
SPA에서는 페이지 새로 고침이 발생하지 않습니다. 대신에 필요한 모든 HTML, JavaScript 및 CSS 코드는 단일 페이지 로드
로 브라우저에서 검색하거나 적절한 리소스가 일반적으로 사용자 작업에 대한 응답으로 필요에 따라 동적으로 로드되어 페이지에
추가 됩니다
대표 SPA
Vue.js
React
SVELTE
NGULAR

SPA vs MPA
SPA
- 웹에 필요한 모든 정적 리소스를 최초 한 번에 다운로드
- SEO에 취약
- 첫로딩이 비교적 느림
- 웹 사용자 경험(UX)
- 서버의 템플릿 연산을 클라이언트 분산으로 성능 우위
- 컴포넌트별 개발 우위(재사용성)
MPA
- 새로운 페이지를 요청 할 때 마다 정적 리소스가 다운로드
- SEO에 유리 (완성된 HTML 파일)
- 첫로딩이 매우 빠름
- 페이지 라우팅(주소)가 바뀔 때 마다 재요청
- 서버렌더링으로 인한 성능 이슈 가능성

Vanilla JS란
앞에서 언급된 Vue, React, Angular와 같은 web framework 또는 jQuery와 같은 library 대신 자바스크립트를 순수하게 사용하는 방법
- 컴퓨터 소프트웨어 및 때로는 컴퓨터 하드웨어또는 알고리즘과 같은 기타 컴퓨팅 관련 시스템이 원래형태에서
  커스터마이징 되지 않은 경우
- 바닐라는 보통보다 기본을 더 의미
- 라이브러리 또는 써드파티 플러그인을 쓰지 않는 경우
ex)
jQuery = $('li').css('color','red')
Vanilla = document.querySelectorAll('li').forEach(item => item.style.color='red)

Vue.js란?
Vue는 사용자 인터페이스를 만들기 위한 프로그레시브 프레임워크이다

- 웹을 개발하는 프레임 워크 중 하나

Vue.js(하)
HTML과 JavaScript의 기본에 가장 가깝기 때문에, 가장 친숙하다, Vue.js를 시작하는 것은, 당신의 HTMl문서에 하나를
추가하는 것만큼 쉽다. Vue.js는 당신이 더 복잡한 어플리케이션을 만들수록 더 복잡해진다 복잡한 어플리케이션을 위해서는,
더 복잡한 프로젝트 설정(Vue CLI가 훨씬 더 쉽게 하지만 .vue파일들을 다룰 줄 알아야한다.)

React.js(중)
모든것들이 Javascript이다라는 접근이지만, 두 가지 주의할 점이 있다. 첫 번째로, ES6구문들과 최적화되어 있기 때문에
막 개발을 시작한 사람들에게는 어려울 수 있다. 두번째는, Javascript의 대체적인 프로젝트에서 잘 쓰이지 않는, HTML과
Javascript이 혼합된 구문인 JSX이다. JSX는 HTML처럼 보이지만 Javascript이고, 코드를 이해하는데 혼란이 올 수 
있기 때문에 처음에는 어려울수있다

Angular.js(상)
Angular는 Typescript를 사용하기 때문에, 배우기 어렵다. 컴포넌트 모듈 그리고 구문들은 Javascript와는 꽤 다르다.
Angular는 강력한 기능들이 많이 내장되어 있기 때문에, 개발자들이 어플리케이션을 개발하는데 꽤 도움이 될 수 있을지도
모르는 특정패턴으로 코딩하도록 한다

선언적 렌더링
v-bind 속성은 디렉티브 이라고 한다. 디렉티브는 Vue에서 제공하는 특수 속성임을 나타내는 v- 접두어가 붙어있으며
사용자가 짐작할수 있듯 렌더링 된 DOM에 특수한 반응형 동작을 합니다. 기본적으로 이 요소의 title속성을 Vue인스턴스의
message 속성으로 최신 상태를 유지 합니다

조건문과 반복문
엘리먼트가 표시되는지에 대한 여부를 제어하는 것은 아주 간단합니다

v-for 디렉티브는 배열의 데이터를 바인딩하여 Todo 목록을 표시하는데 사용할 수 있습니다

사용자 입력 핸들링
사용자가 앱과 상호 작용할 수 있게 하기 위해 v-on 디렉티브를 사용하여 Vue 인스턴스에서 메소드를 호출하는 이벤트리스너를 추가가능

컴포넌트를 사용한 작정방법

컴포넌트 시스템은 Vue의 또 다른 중요한 개념입니다. 이는 작고 독립적이며 재사용할 수 있는 컴포넌트로 구성된
대규모 애플리케이션을 구축할 수 있게 해주는 추상적 개념입니다. 생각해보면 거의 모든 유형의 애플리케이션 인터페이스를
컴포넌트 트리로 추상화할 수 있습니다.

vue에서 컴포넌트는 미리 정의된 옵션을 가진 Vue인스턴스 입니다

부모영역의 데이터를 자식 컴포넌트에 전달할 수 있어야 합니다. prop을 전달 받을 수 있어야함

Vue.js 인스턴스 만들기
모든 Vue 앱은 Vue 함수로 새 Vue 인스턴스를 만드는 것부터 시작합니다
엄격히 MVVM 패턴과 관련이 없지만 Vue의 디자인은 부분적으로 그것에 영감을 받았습니다

모델-뷰-뷰-모델 은 하나의 소프트웨어 아키텍쳐 패턴으로 GUI 코드로 구현하는 그래픽 사용자 인터페이스의 개발을
비즈니스 로직 또는 백-엔드 로직으로부터 분리시켜서 뷰가 어느 특정한 모델 플랫폼에 종속되지 않도록 해준다

전체 옵션목록은 API reference에서 확인가능 Vue홈페이지
var vm = new Vue({
  //옵션
})

옵션
data: object | function, Vue 인스턴스의 데이터 객체
props: Array<string> | Object, 부모 컴포넌트 데이터 메타
propsData: { [key: string]: any } 인스턴스 생성하는 동안 속성 전달
computed: Vue인스턴스의 계산된 속성
methods: Vue 인스턴스의 method
watch 키가 표시되는 표현식이고 값이 콜백

템플릿 문법

https://react.vlpt.us/basic/12-variable-with-useRef.html
